<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>微信公众号：ytcode &gt; on 技术闲聊</title>
    <link>https://ytcode.io/</link>
    <description>Recent content in 微信公众号：ytcode &gt; on 技术闲聊</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 08 Nov 2019 11:43:43 +0800</lastBuildDate>
    
	<atom:link href="https://ytcode.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>关于</title>
      <link>https://ytcode.io/%E5%85%B3%E4%BA%8E/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ytcode.io/%E5%85%B3%E4%BA%8E/</guid>
      <description>记录下日常的技术细节</description>
    </item>
    
    <item>
      <title>Git示例教程 - 有关Git命令无法正确显示中文路径的问题</title>
      <link>https://ytcode.io/posts/git/unicode_path/</link>
      <pubDate>Fri, 08 Nov 2019 11:43:43 +0800</pubDate>
      
      <guid>https://ytcode.io/posts/git/unicode_path/</guid>
      <description>相关命令：
# 设置Git让其在输出路径时正确显示中文 git config --global core.quotePath false # 如果是Mac用户，在执行了上述命令后还是不行 # 可以再看下Git的 core.precomposeUnicode 这个参数 情景模拟：
先用下面的命令创建一个测试用的Git仓库：
# 创建一个空的Git仓库 mkdir repo cd repo git init # 添加一个文件 touch 中文文件名.txt 然后执行git status命令：
$ git status On branch master Untracked files: (use &amp;#34;git add &amp;lt;file&amp;gt;...&amp;#34; to include in what will be committed) &amp;#34;\344\270\255\346\226\207\346\226\207\344\273\266\345\220\215.txt&amp;#34; 由上可见，我们新添加的文件并没有以中文正确显示。
下面我们再执行下文章开始时介绍的命令设置一下Git：
$ git config --global core.quotePath false # 设置Git让其正确显示中文路径 $ git status # 看下设置后的结果 On branch master Untracked files: (use &amp;#34;git add &amp;lt;file&amp;gt;.</description>
    </item>
    
    <item>
      <title>简单实用的小命令 - sort</title>
      <link>https://ytcode.io/posts/tool/sort/</link>
      <pubDate>Fri, 08 Nov 2019 10:43:23 +0800</pubDate>
      
      <guid>https://ytcode.io/posts/tool/sort/</guid>
      <description>我们执行ls命令一般会有类似下面的输出：
$ ls -lh total 1.1M -rw-r--r-- 1 yt yt 512 Nov 5 23:29 a.txt -rw-r--r-- 1 yt yt 1.0K Nov 5 23:29 b.txt -rw-r--r-- 1 yt yt 5.0K Nov 5 23:30 c.txt -rw-r--r-- 1 yt yt 1.1M Nov 5 23:31 d.txt 假设我们想对文件大小进行排序，可以用sort命令：
$ ls -lh | sort -k 5 total 1.1M -rw-r--r-- 1 yt yt 1.0K Nov 5 23:29 b.txt -rw-r--r-- 1 yt yt 1.1M Nov 5 23:31 d.txt -rw-r--r-- 1 yt yt 5.</description>
    </item>
    
    <item>
      <title>Git示例教程 - 如何使用git rebase命令</title>
      <link>https://ytcode.io/posts/git/rebase/</link>
      <pubDate>Mon, 04 Nov 2019 17:12:41 +0800</pubDate>
      
      <guid>https://ytcode.io/posts/git/rebase/</guid>
      <description>相关命令：
# 假设你的分支情况是这样 # A---B---C topic # / # D---E---F---G master # 想改成这样 # A---B---C topic # / # D---E---F---G master # 可以使用下面的命令，该命令的意思是： # 把从topic可达但从master不可达的提交（A,B,C）提取出来 # 然后以当前master为新的起始点将这些提交依次链接起来 git rebase master topic # 假设你的分支情况是这样 # o---o---o---o---o master # \ # o---o---o---o---o next # \ # o1---o2---o3 topic # 想改成这样 # o---o---o---o---o master # | \ # | o1---o2---o3 topic # \ # o---o---o---o---o next # 可以使用下面的命令，该命令的意思是： # 把从topic可达但从next不可达的提交（o1,o2,o3）提取出来 # 然后以当前master为新的起始点将这些提交依次链接起来 git rebase --onto master next topic 情景模拟：</description>
    </item>
    
    <item>
      <title>Git示例教程 - 合并多次提交为一次</title>
      <link>https://ytcode.io/posts/git/rebase_squash_commits/</link>
      <pubDate>Sun, 03 Nov 2019 19:50:51 +0800</pubDate>
      
      <guid>https://ytcode.io/posts/git/rebase_squash_commits/</guid>
      <description>相关命令：
# 把当前分支commit提交之后的所有提交合并为一次 # 其实该命令可以做很多事，我们这里只讲合并提交 git rebase -i &amp;lt;commit&amp;gt; # 也可以用下面的命令，先把当前分支commit之后的 # 所有提交reset到Git的staging area，然后再把它 # 们作为一个整体重新提交 git reset --soft &amp;lt;commit&amp;gt; git commit -m 新的提交日志 情景模拟：
先执行下面的命令，创建一个测试用的Git仓库：
# 创建一个空的Git仓库 mkdir repo cd repo git init # 初始提交 touch a.txt git add . git commit -m &amp;#34;initial&amp;#34; # 测试提交 for i in {1..5} do echo $i &amp;gt;&amp;gt; a.txt git commit -am $i done 查看当前的提交日志：
$ git -P log --oneline b340ba5 (HEAD -&amp;gt; master) 5 8d2b211 4 db287a3 3 e6ee31a 2 6e209bc 1 ca16b3c initial 假设我们想把提交1到5合并成一次，可以执行以下命令：</description>
    </item>
    
    <item>
      <title>Linux系统研究 - 操作系统是如何管理tcp连接的</title>
      <link>https://ytcode.io/posts/linux/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%98%AF%E5%A6%82%E4%BD%95%E7%AE%A1%E7%90%86tcp%E8%BF%9E%E6%8E%A5%E7%9A%84/</link>
      <pubDate>Thu, 31 Oct 2019 14:16:49 +0800</pubDate>
      
      <guid>https://ytcode.io/posts/linux/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%98%AF%E5%A6%82%E4%BD%95%E7%AE%A1%E7%90%86tcp%E8%BF%9E%E6%8E%A5%E7%9A%84/</guid>
      <description>首先，在linux内核的网络模块里维护着一个全局实例，用来存储所有和tcp相关的socket：
// net/ipv4/tcp_ipv4.c struct inet_hashinfo tcp_hashinfo; 其次，在该实例的内部，又根据socket用途的不同，划分成四个hashtable：
// include/net/inet_hashtables.h struct inet_hashinfo { // key是由本地地址、本地端口、远程地址、远程端口组成的四元组  // value是想要进行tcp通信的所有socket  // 比如正在建立连接的socket，正在传输数据的socket，以及正在关闭连接的socket  // 当内核收到一个tcp消息时，会先提取tcp消息头中的远程及本地的地址端口信息  // 然后以该信息作为key，在ehash中找对应的socket，如果该socket存在  // 则根据这个socket的当期状态以及tcp消息的内容，对该socket做后续的逻辑处理  struct inet_ehash_bucket *ehash; // key是本地端口  // value是一个集合对象，里面存放着所有正在使用该端口的socket  // 比如监听着某个端口的服务端socket  // 比如通过某个监听端口建立tcp连接的对应的本地socket（该socket和监听socket使用同样的本地端口）  // 该hashtable的作用是为了查找某个端口是否可以被使用  // 比如在我们执行bind操作时  // 比如在我们调用connect方法，操作系统帮我们挑选本地端口时  struct inet_bind_hashbucket *bhash; // key是由本地地址和本地端口组成的二元组  // value是对应的处于监听状态中的socket  // 该hashtable的作用是，当内核收到建立tcp连接请求时  // 可以从这里快速的查找到对应的服务端监听socket  struct inet_listen_hashbucket *lhash2; // key是本地端口  // value是对应的处于监听状态中的socket  // 由于该hashtable在tcp的主体逻辑中并不会被大量使用  // 所以下文不会过多介绍  struct inet_listen_hashbucket listening_hash[INET_LHTABLE_SIZE]; }; 由上可见，tcp_hashinfo实例最主要的用途就是根据不同条件，快速查找到对应的socket。</description>
    </item>
    
    <item>
      <title>Git示例教程 - 灵活使用git diff命令</title>
      <link>https://ytcode.io/posts/git/diff/</link>
      <pubDate>Wed, 30 Oct 2019 18:02:21 +0800</pubDate>
      
      <guid>https://ytcode.io/posts/git/diff/</guid>
      <description>相关命令：
# 比较当前工作区和Git的staging area里内容的区别 git diff # 比较Git的staging area和当前分支指向内容的区别 git diff --staged # 比较任意两次提交指向内容的区别 git diff &amp;lt;commit&amp;gt; &amp;lt;commit&amp;gt; 情景模拟：
先执行下面的命令，创建一个测试用的Git仓库：
# 创建一个空的Git仓库 mkdir repo cd repo git init # 提交一次 echo a1 &amp;gt; a.txt git add . git commit -m &amp;#34;Initial commit&amp;#34; 然后再执行下面的命令，对a.txt文件做一些修改：
echo a2 &amp;gt; a.txt 最后我们执行两次diff命令（参数不一样），看下输出有什么不同：
$ git -P diff # 参数-P可以不管，下同 diff --git a/a.txt b/a.txt index da0f8ed..c1827f0 100644 --- a/a.txt +++ b/a.txt @@ -1 +1 @@ -a1 +a2 $ git -P diff --staged # 没有任何输出 由上可见，没有&amp;ndash;staged参数的diff命令输出了文件变化，而有&amp;ndash;staged参数的diff命令没有任何输出，即表示没有任何变化。</description>
    </item>
    
    <item>
      <title>Git示例教程 - 命令别名</title>
      <link>https://ytcode.io/posts/git/command_alias/</link>
      <pubDate>Tue, 29 Oct 2019 22:34:07 +0800</pubDate>
      
      <guid>https://ytcode.io/posts/git/command_alias/</guid>
      <description>相关命令：
git config --global alias.别名 别名代表的真正命令 对于那些经常使用的，或者是特别复杂的Git命令，我们可以为其设置别名，这样在我们想要执行对应的Git命令时，只要执行这个别名命令就好了，简单方便。
下面来演示下。
当我们在命令行中，想要以图形化的方式查看当前分支的提交日志时，可以使用下面的命令：
$ git log --graph --oneline * 8005803a2ca0 (HEAD -&amp;gt; master, origin/master, origin/HEAD) Merge tag &amp;#39;arc-5.4-rc6&amp;#39; of git://git.kernel.org/pub/scm/linux/kernel/git/vgupta/arc |\ | * 5effc09c4907 ARC: perf: Accommodate big-endian CPU | * ab563bf54a4d ARC: [plat-hsdk]: Enable on-boardi SPI ADC IC | * 8ca8fa7f22dc ARC: [plat-hsdk]: Enable on-board SPI NOR flash IC * | 0365fb6baeb1 Merge branch &amp;#39;for-linus&amp;#39; of git://git.kernel.org/pub/scm/linux/kernel/git/hid/hid |\ \ | * | 09f3dbe47473 HID: i2c-hid: add Trekstor Primebook C11B to descriptor override | * | 08c453f6d073 HID: logitech-hidpp: do all FF cleanup in hidpp_ff_destroy() | * | 905d754c53a5 HID: logitech-hidpp: rework device validation # 省略输出 # 上面命令显示的是当前linux内核master分支的提交日志。</description>
    </item>
    
    <item>
      <title>Git示例教程 - 命令行中图形化显示提交日志</title>
      <link>https://ytcode.io/posts/git/log_graph/</link>
      <pubDate>Tue, 29 Oct 2019 17:17:17 +0800</pubDate>
      
      <guid>https://ytcode.io/posts/git/log_graph/</guid>
      <description>相关命令：
# 图形化显示当前分支的提交日志 git log --graph --oneline # 图形化显示当前分支的提交日志及每次提交的变更内容 git log --graph --patch # 图形化显示所有分支的提交日志 git log --graph --oneline --all # 图形化显示所有分支的提交日志及每次提交的变更内容 git log --graph --patch --all 效果演示：
我们先用下面的命令创建一个测试用的Git仓库：
# 创建一个空的Git仓库 mkdir repo &amp;amp;&amp;amp; cd repo &amp;amp;&amp;amp; git init # master分支提交m1 echo m1 &amp;gt; m1.txt &amp;amp;&amp;amp; git add . &amp;amp;&amp;amp; git commit -m m1 # b分支提交b1、b2 git checkout -b b echo b1 &amp;gt; b1.txt &amp;amp;&amp;amp; git add . &amp;amp;&amp;amp; git commit -m b1 echo b2 &amp;gt; b2.</description>
    </item>
    
    <item>
      <title>Git示例教程 - 同步本地分支的添加删除状态到远程（或反之）</title>
      <link>https://ytcode.io/posts/git/branch_sync/</link>
      <pubDate>Mon, 28 Oct 2019 23:02:27 +0800</pubDate>
      
      <guid>https://ytcode.io/posts/git/branch_sync/</guid>
      <description>相关命令：
# 遍历本地仓库中的所有分支，如果该分支在远程仓库中不存在，则在远程仓库中创建该分支 # 遍历远程仓库中的所有分支，如果该分支在本地仓库中不存在，则在远程仓库中删除该分支 git push --all --prune # 遍历远程仓库中的所有分支，如果该分支在本地仓库中没有对应的远程追踪分支，则在本地仓库中创建该分支 # 遍历本地仓库中的所有远程追踪分支，如果该分支在远程仓库中没有对应的分支，则将其删除 git fetch --prune 情景模拟：
为了方便测试，我们先在GitHub上创建一个名为git-test-repo的仓库，然后将其克隆到本地，之后，我们再用相应的命令创建一个测试分支，并将其同步到远端，具体命令如下：
$ git clone https://github.com/wangyuntao/git-test-repo.git repo1 # 省略输出 # $ cd repo1 $ git push origin master:b3 # 创建一个远程分支b3 # 省略输出 # $ git -P branch -avv # 查看当前分支状态 * master ab5a63d [origin/master] Initial commit remotes/origin/HEAD -&amp;gt; origin/master remotes/origin/b3 ab5a63d Initial commit remotes/origin/master ab5a63d Initial commit 我们再打开一个终端，将该仓库再克隆一份到本地备用：
$ git clone https://github.com/wangyuntao/git-test-repo.git repo2 # 省略输出 # $ cd repo2 $ git -P branch -avv * master ab5a63d [origin/master] Initial commit remotes/origin/HEAD -&amp;gt; origin/master remotes/origin/b3 ab5a63d Initial commit remotes/origin/master ab5a63d Initial commit 现在我们回到repo1中，执行下面的命令：</description>
    </item>
    
    <item>
      <title>Git示例教程 - 删除本地分支及远程分支</title>
      <link>https://ytcode.io/posts/git/delete_branch/</link>
      <pubDate>Mon, 28 Oct 2019 23:02:22 +0800</pubDate>
      
      <guid>https://ytcode.io/posts/git/delete_branch/</guid>
      <description>相关命令：
git branch -d 要删除的分支 # 删除本地分支 git branch -D 要删除的分支 # 强制删除本地分支 git push -d origin 要删除的分支 # 删除远程分支 情景模拟：
为了方便测试，我们先在GitHub上创建一个名为git-test-repo的仓库，然后将其克隆到本地，并看下其当前的分支情况：
$ git clone https://github.com/wangyuntao/git-test-repo.git Cloning into &#39;git-test-repo&#39;... # 省略部分输出 # $ cd git-test-repo $ git -P branch -avv * master ab5a63d [origin/master] Initial commit remotes/origin/HEAD -&amp;gt; origin/master remotes/origin/master ab5a63d Initial commit  由上可见，该仓库目前只有本地分支master，其对应的远程分支为origin/master（就是该仓库在GitHub上的master分支）。
下面我们用上一篇文章中介绍过的命令，创建一个测试分支，并同步到远端：
$ git branch b1 $ git push --set-upstream origin b1 # 省略输出 # $ git -P branch -avv b1 ab5a63d [origin/b1] Initial commit * master ab5a63d [origin/master] Initial commit remotes/origin/HEAD -&amp;gt; origin/master remotes/origin/b1 ab5a63d Initial commit remotes/origin/master ab5a63d Initial commit 由上可见，我们创建了一个本地分支b1，然后将其同步到了GitHub上（orgin/b1）。</description>
    </item>
    
    <item>
      <title>Git示例教程 - 创建本地分支及远程分支</title>
      <link>https://ytcode.io/posts/git/create_branch/</link>
      <pubDate>Mon, 28 Oct 2019 23:02:21 +0800</pubDate>
      
      <guid>https://ytcode.io/posts/git/create_branch/</guid>
      <description>相关命令：
git branch 新分支名 # 基于当前分支创建一个新分支 git push --set-upstream origin 新分支名 # 将新分支推送到远端 情景模拟：
为了方便测试，我们先在GitHub上创建一个名为git-test-repo的仓库，然后将其克隆到本地，并看下其当前的分支情况：
$ git clone https://github.com/wangyuntao/git-test-repo.git Cloning into &amp;#39;git-test-repo&amp;#39;... # 省略部分输出 # $ cd git-test-repo $ git -P branch -avv * master ab5a63d [origin/master] Initial commit remotes/origin/HEAD -&amp;gt; origin/master remotes/origin/master ab5a63d Initial commit 由上可见，该仓库目前有个本地分支master，其对应的远程分支为origin/master（就是该仓库在GitHub上的master分支）。
现在我们基于master分支，再创建一个分支b1：
$ git branch b1 # 创建分支b1 $ git -P branch -avv # 查看当前分支情况 b1 ab5a63d Initial commit * master ab5a63d [origin/master] Initial commit remotes/origin/HEAD -&amp;gt; origin/master remotes/origin/master ab5a63d Initial commit 由上可见，该仓库现在多了一个本地分支b1，但其目前并没有对应的远程分支。</description>
    </item>
    
    <item>
      <title>Git示例教程 - 修改上次提交</title>
      <link>https://ytcode.io/posts/git/modify_last_commit/</link>
      <pubDate>Mon, 28 Oct 2019 23:02:20 +0800</pubDate>
      
      <guid>https://ytcode.io/posts/git/modify_last_commit/</guid>
      <description>如果只是修改上次提交的日志，可以直接使用下面的命令：
git commit --amend -m 新的提交日志 如果上次提交的内容有误或者不全，想要修改上次提交中文件的内容，或是添加新的文件，可以执行下面的命令：
# 先修改对应的文件 # git add 修改的文件或新文件 # 执行下面的命令，将这次修改的内容合并到上次提交 git commit --amend --no-edit 情景模拟：
先使用下面的命令初始化一个测试用的Git仓库：
# 初始化一个空的Git仓库 mkdir repo &amp;amp;&amp;amp; cd repo git init # 将a.txt加入到版本控制中 echo A1 &amp;gt; a.txt git add . git commit -m 1 执行完上面的命令后，你发现提交的日志不太友好，想要修改下，可以使用下面的命令：
$ git commit --amend -m 正确的日志 [master e80dc2f] 正确的日志 Date: Wed Oct 23 17:17:41 2019 +0800 1 file changed, 1 insertion(+) create mode 100644 a.txt $ git -P log --pretty=oneline --abbrev-commit # 确认日志是修改了 e80dc2f (HEAD -&amp;gt; master) 正确的日志 由上可见，通过上面的命令，上次提交的日志信息得到了修复。</description>
    </item>
    
    <item>
      <title>Git示例教程 - 撤销上次提交</title>
      <link>https://ytcode.io/posts/git/undo_last_commit/</link>
      <pubDate>Sun, 27 Oct 2019 18:02:27 +0800</pubDate>
      
      <guid>https://ytcode.io/posts/git/undo_last_commit/</guid>
      <description>最终命令：
git reset HEAD^ # 上次提交内容会被保存到工作目录 git reset --hard HEAD^ # 上次提交内容会被直接丢弃 情景模拟：
先使用下面的命令初始化一个测试用的Git仓库：
# 初始化一个空的Git仓库 mkdir repo &amp;amp;&amp;amp; cd repo git init # 将a.txt加入到版本控制中 echo A1 &amp;gt; a.txt git add . git commit -m 1 # 将a.txt的内容修改为A2并提交 echo A2 &amp;gt; a.txt git commit -am 2 执行完上面的命令后，看下当前的Git日志：
$ git -P log --pretty=oneline --abbrev-commit 4490479 (HEAD -&amp;gt; master) 2 bf92587 1 假设我们想撤销上次提交，但上次提交的内容不丢弃，可以使用下面的命令：
$ git reset HEAD^ Unstaged changes after reset: M a.</description>
    </item>
    
    <item>
      <title>Git示例教程 - 撤销对单个文件的修改</title>
      <link>https://ytcode.io/posts/git/undo_changes_to_one_file/</link>
      <pubDate>Sun, 27 Oct 2019 18:02:27 +0800</pubDate>
      
      <guid>https://ytcode.io/posts/git/undo_changes_to_one_file/</guid>
      <description>最终命令：
git checkout HEAD a.txt # 撤销对a.txt文件的修改 git restore --source=HEAD --staged --worktree a.txt # 也可以使用这个命令 情景模拟：
先使用下面的命令初始化一个测试用的Git仓库：
# 初始化一个空的Git仓库 mkdir repo &amp;amp;&amp;amp; cd repo git init # 将a.txt加入到版本控制中 echo A1 &amp;gt; a.txt git add . git commit -m init # 修改a.txt，并把这次修改加入到Git的staging area中 echo A2 &amp;gt;&amp;gt; a.txt git add . # 修改a.txt，不把这次修改加入到Git的staging area中 echo A3 &amp;gt;&amp;gt; a.txt 执行完上面的命令后，看下该Git仓库的当前状态：
$ git status On branch master Changes to be committed: (use &amp;#34;git restore --staged &amp;lt;file&amp;gt;.</description>
    </item>
    
    <item>
      <title>Git示例教程 - 撤销对所有文件的修改</title>
      <link>https://ytcode.io/posts/git/undo_changes_to_all_files/</link>
      <pubDate>Sun, 27 Oct 2019 18:02:27 +0800</pubDate>
      
      <guid>https://ytcode.io/posts/git/undo_changes_to_all_files/</guid>
      <description>最终命令：
$ git reset --hard # 撤销所有文件的修改（不算未进入版本控制的文件） $ git clean -fd # 删除所有未进入版本控制的文件 下面用一个例子展示下这两个命令的使用。
先用下面的命令初始化一个测试用的Git仓库：
$ mkdir repo $ cd repo $ git init # 初始化一个空Git仓库 $ echo a &amp;gt; f1.txt $ git add . $ git commit -m f1 # 将f1.txt加入到版本控制中 $ echo b &amp;gt; f1.txt # 修改f1.txt的内容 $ touch f2.txt # 创建新文件f2.txt，其并未进入到版本控制中 执行完上面的命令后，我们已经有了一个可供测试的Git仓库。
再用下面的命令看下文件的变化情况：
$ git status -s M f1.txt ?? f2.txt $ git -P diff diff --git a/f1.</description>
    </item>
    
    <item>
      <title>Search</title>
      <link>https://ytcode.io/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ytcode.io/search/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>