<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>wangyuntao on 技术闲聊</title>
    <link>http://www.example.com/authors/wangyuntao/</link>
    <description>Recent content in wangyuntao on 技术闲聊</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 27 Oct 2019 18:02:27 +0800</lastBuildDate>
    
	<atom:link href="http://www.example.com/authors/wangyuntao/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Git示例教程 - 撤销上次提交</title>
      <link>http://www.example.com/posts/undo_last_commit/</link>
      <pubDate>Sun, 27 Oct 2019 18:02:27 +0800</pubDate>
      
      <guid>http://www.example.com/posts/undo_last_commit/</guid>
      <description>最终命令：
git reset HEAD^ # 上次提交内容会被保存到工作目录 git reset --hard HEAD^ # 上次提交内容会被直接丢弃 情景模拟：
先使用下面的命令初始化一个测试用的Git仓库：
# 初始化一个空的Git仓库 mkdir repo &amp;amp;&amp;amp; cd repo git init # 将a.txt加入到版本控制中 echo A1 &amp;gt; a.txt git add . git commit -m 1 # 将a.txt的内容修改为A2并提交 echo A2 &amp;gt; a.txt git commit -am 2 执行完上面的命令后，看下当前的Git日志：
$ git -P log --pretty=oneline --abbrev-commit 4490479 (HEAD -&amp;gt; master) 2 bf92587 1 假设我们想撤销上次提交，但上次提交的内容不丢弃，可以使用下面的命令：
$ git reset HEAD^ Unstaged changes after reset: M a.</description>
    </item>
    
    <item>
      <title>Git示例教程 - 撤销对单个文件的修改</title>
      <link>http://www.example.com/posts/undo_changes_to_one_file/</link>
      <pubDate>Sun, 27 Oct 2019 18:02:27 +0800</pubDate>
      
      <guid>http://www.example.com/posts/undo_changes_to_one_file/</guid>
      <description>最终命令：
git checkout HEAD a.txt # 撤销对a.txt文件的修改 git restore --source=HEAD --staged --worktree a.txt # 也可以使用这个命令 情景模拟：
先使用下面的命令初始化一个测试用的Git仓库：
# 初始化一个空的Git仓库 mkdir repo &amp;amp;&amp;amp; cd repo git init # 将a.txt加入到版本控制中 echo A1 &amp;gt; a.txt git add . git commit -m init # 修改a.txt，并把这次修改加入到Git的staging area中 echo A2 &amp;gt;&amp;gt; a.txt git add . # 修改a.txt，不把这次修改加入到Git的staging area中 echo A3 &amp;gt;&amp;gt; a.txt 执行完上面的命令后，看下该Git仓库的当前状态：
$ git status On branch master Changes to be committed: (use &amp;#34;git restore --staged &amp;lt;file&amp;gt;.</description>
    </item>
    
    <item>
      <title>Git示例教程 - 撤销对所有文件的修改</title>
      <link>http://www.example.com/posts/undo_changes_to_all_files/</link>
      <pubDate>Sun, 27 Oct 2019 18:02:27 +0800</pubDate>
      
      <guid>http://www.example.com/posts/undo_changes_to_all_files/</guid>
      <description>最终命令：
$ git reset --hard # 撤销所有文件的修改（不算未进入版本控制的文件） $ git clean -fd # 删除所有未进入版本控制的文件 下面用一个例子展示下这两个命令的使用。
先用下面的命令初始化一个测试用的Git仓库：
$ mkdir repo $ cd repo $ git init # 初始化一个空Git仓库 $ echo a &amp;gt; f1.txt $ git add . $ git commit -m f1 # 将f1.txt加入到版本控制中 $ echo b &amp;gt; f1.txt # 修改f1.txt的内容 $ touch f2.txt # 创建新文件f2.txt，其并未进入到版本控制中 执行完上面的命令后，我们已经有了一个可供测试的Git仓库。
再用下面的命令看下文件的变化情况：
$ git status -s M f1.txt ?? f2.txt $ git -P diff diff --git a/f1.</description>
    </item>
    
  </channel>
</rss>