<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux系统研究 on 技术闲聊</title>
    <link>https://ytcode.io/categories/linux%E7%B3%BB%E7%BB%9F%E7%A0%94%E7%A9%B6/</link>
    <description>Recent content in Linux系统研究 on 技术闲聊</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 31 Oct 2019 14:16:49 +0800</lastBuildDate>
    
	<atom:link href="https://ytcode.io/categories/linux%E7%B3%BB%E7%BB%9F%E7%A0%94%E7%A9%B6/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Linux系统研究 - 操作系统是如何管理tcp连接的</title>
      <link>https://ytcode.io/posts/linux/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%98%AF%E5%A6%82%E4%BD%95%E7%AE%A1%E7%90%86tcp%E8%BF%9E%E6%8E%A5%E7%9A%84/</link>
      <pubDate>Thu, 31 Oct 2019 14:16:49 +0800</pubDate>
      
      <guid>https://ytcode.io/posts/linux/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%98%AF%E5%A6%82%E4%BD%95%E7%AE%A1%E7%90%86tcp%E8%BF%9E%E6%8E%A5%E7%9A%84/</guid>
      <description>首先，在linux内核的网络模块里维护着一个全局实例，用来存储所有和tcp相关的socket：
// net/ipv4/tcp_ipv4.c struct inet_hashinfo tcp_hashinfo; 其次，在该实例的内部，又根据socket类型的不同，划分成四个hashtable：
// include/net/inet_hashtables.h struct inet_hashinfo { // key是由本地地址、本地端口、远程地址、远程端口组成的四元组  // value是正在建立连接或已经建立连接的socket  // 比如，当内核收到一个tcp消息时，它先从消息头里读出地址和端口等信息  // 然后用该信息到ehash里获取对应的socket  // 最后把剩余的tcp数据添加到该socket的recv buf中供用户程序读取  struct inet_ehash_bucket *ehash; // key是本地端口  // value是使用这个端口的所有socket  // 比如，当我们用socket监听一个端口时，该socket就在bhash里  // 同理，由该监听端口建立的连接对应的那些socket也在这里  // 因为它们也都是使用同样的本地端口  struct inet_bind_hashbucket *bhash; // key是本地地址和端口组成的二元组  // value是对应的处于listen状态的socket  struct inet_listen_hashbucket *lhash2; // key是本地端口  // value是对应的处于listen状态的socket  struct inet_listen_hashbucket listening_hash[INET_LHTABLE_SIZE]; }; 在系统启动时，这个全局的tcp_hashinfo实例会在下面的方法中被初始化：
// net/ipv4/tcp.</description>
    </item>
    
  </channel>
</rss>